{"version":3,"file":"static/js/431.844c60c0.chunk.js","mappings":"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","sources":["pages/Mcq.js"],"sourcesContent":["import axios from 'axios'\nimport React, { useState, useEffect } from 'react'\n// import { MdDarkMode } from 'react-icons/md'\nimport { GrStatusGoodSmall } from 'react-icons/gr'\nimport Helmet from 'react-helmet'\n\nexport default function Mcq() {\n    const [darkMode, setDarkMode] = useState(JSON.parse(localStorage.getItem('md')) !== null ? JSON.parse(localStorage.getItem('md')) : true)\n    const [currentPage, setCurrentPage] = useState(0)\n    const [answers, setAnswers] = useState([])\n\n    useEffect(() => {\n        const root = window.document.documentElement\n        if (darkMode) {\n            root.classList.add('dark')\n        } else {\n            root.classList.remove('dark')\n        }\n    }, [darkMode])\n\n    const questions = [\n        {\n            question: \"What is this?\",\n            options: [\"that\", \"not that\", \"is that\", \"isn't that\"]\n        },\n        {\n            question: \"What is it?\",\n            options: [\"it\", \"not it\", \"is it\", \"isn't it\"]\n        },\n        {\n            question: \"What is that?\",\n            options: [\"this\", \"not this\", \"is this\", \"isn't this\"]\n        },\n        {\n            question: \"What is this?\",\n            options: [\"that\", \"not that\", \"is that\", \"isn't that\"]\n        },\n        {\n            question: \"What is it?\",\n            options: [\"it\", \"not it\", \"is it\", \"isn't it\"]\n        },\n        {\n            question: \"What is that?\",\n            options: [\"this\", \"not this\", \"is this\", \"isn't this\"]\n        }\n    ]\n\n    const questionsPerPage = 2\n    const pagesVisited = currentPage * questionsPerPage\n    const pageCount = Math.ceil(questions.length / questionsPerPage)\n\n\n    function intToChar(int) {\n        // for Uppercase letters, replace `a` with `A`\n        const code = 'a'.charCodeAt(0);\n        return String.fromCharCode(code + int);\n    }\n\n    const handleChangePage = ({ selected }) => {\n        setCurrentPage(selected - 1)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        for (let i = 0; i < questions.length; i++) {\n            if (!answers[i])\n                answers[i] = null\n        }\n        console.log(answers)\n    }\n\n    const displayQuestions = questions.slice(pagesVisited, pagesVisited + questionsPerPage).map((question, i) => {\n        return (\n            <div key={i} className='flex flex-col gap-1'>\n                <Helmet>\n                    <title>Mcq | Aakhyaan Academy</title>\n                </Helmet>\n                <div className='flex gap-2'>\n                    <div>{pagesVisited + i + 1}.</div>\n                    <div>{question.question}</div>\n                </div>\n                <div className='flex flex-col ml-10 gap-3'>\n                    {question.options.map((option, j) => {\n                        return (\n                            <div key={pagesVisited + i + j} className='flex gap-3 items-center'>\n                                <input className='hover:cursor-pointer' type=\"radio\" name={`question${pagesVisited + i + 1}`} value={option}\n                                    checked={answers[pagesVisited + i] === j ? true : false} onChange={(e) => {\n                                        if (e.target.checked) {\n                                            const newAnswers = Object.assign([...answers], {\n                                                [pagesVisited + i]: j\n                                            });\n                                            setAnswers(newAnswers)\n                                        }\n                                    }}\n                                />\n                                <label htmlFor={option}>{option}</label>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    })\n\n\n    return (\n        <>\n            <Header />\n            <div className={`pt-[60px] md:pt-[80px] relative font-sans dark:bg-background dark:text-mainText w-full h-full flex flex-col `}>\n                <form onSubmit={handleSubmit} className='gap-10 flex flex-col p-10 px-20'>\n                    {displayQuestions}\n                    {\n                        currentPage === pageCount - 1 ?\n                            <div>\n\n                                <button className=\"font-sans md:w-1/3 text-lg hover:-translate-y-0.5 transition-all bg-blue-500 hover:bg-blue-700 text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline\" type=\"submit\">\n                                    Submit\n                                </button>\n                            </div>\n                            :\n                            <></>\n                    }\n                </form>\n                <div className='flex justify-center mb-14 absolute bottom-0 left-0 right-0'>\n                    <Paginate\n                        previousLabel={\"Prev\"}\n                        nextLabel={\"Next\"}\n                        pageCount={pageCount}\n                        onPageChange={handleChangePage}\n                        containerClassName={\"flex gap-3 items-center select-none\"}\n                        previousLinkClassName={\"text-lg text-blue-900 dark:text-blue-100 hover:cursor-pointer\"}\n                        nextLinkClassName={\"text-lg text-blue-900 dark:text-blue-100 hover:cursor-pointer\"}\n                        activeClassName={\"bg-blue-600 text-white dark:bg-black hover:bg-blue-400\"}\n                        pageClassName={\"border-2 px-3 py-1 rounded-md hover:bg-blue-600 hover:cursor-pointer hover:text-white dark:hover:bg-black\"}\n                    />\n                </div>\n            </div>\n        </>\n    )\n}\n\n\nexport function Paginate({ nextLabel, previousLabel, pageCount, onPageChange, containerClassName, previousLinkClassName, nextLinkClassName, pageClassName, activeClassName, disabledClassName }) {\n    const [activePage, setActivePage] = useState(1)\n    return (\n        <>\n            {pageCount > 1 ?\n                <div className={containerClassName}>\n                    <div onClick={() => {\n                        if (activePage - 1 !== 0) {\n                            onPageChange({ selected: activePage - 1 })\n                            setActivePage(activePage - 1)\n                        }\n                    }} className={previousLinkClassName}>{previousLabel}</div>\n                    {\n                        [...Array(pageCount)].map((e, i) => {\n                            return (\n                                <div onClick={() => {\n                                    onPageChange({ selected: i + 1 })\n                                    if (activePage !== i + 1) {\n                                        setActivePage(i + 1)\n                                    }\n                                }} key={i + 1} className={`${activePage === i + 1 ? activeClassName : disabledClassName} ${pageClassName}`}>{i + 1}</div>\n                            )\n                        })\n                    }\n                    <div onClick={() => {\n                        if (activePage + 1 <= pageCount) {\n                            onPageChange({ selected: activePage + 1 })\n                            setActivePage(activePage + 1)\n                        }\n                    }} className={nextLinkClassName}>{nextLabel}</div>\n                </div>\n                :\n                <></>\n            }\n        </>\n    )\n}\n\nexport const Header = () => {\n    const [time, setTime] = useState(\"\")\n    async function getTime(continent, city, success) {\n        const url = \"http://worldtimeapi.org/api/timezone/\" + continent + \"/\" + city\n        const { data } = await axios.get(url)\n        const time = { date: data.datetime.slice(0, 9), time: data.datetime.slice(11, 16) }\n        // post the time \n        return time\n    }\n\n    useEffect(() => {\n        const time = getTime('Asia', 'Kathmandu')\n        setTime(time.time)\n    }, [])\n\n    return (\n        <div className={`dark:bg-formBox/50 backdrop-blur-sm dark:text-mainText bg-white fixed z-20 top-0 w-full h-[60px] md:h-[80px] transition ease-out duration-1000 flex justify-between items-center shadow select-none`}>\n            <div className='w-full'>\n                <span className='float-right mx-10 flex gap-2 items-center'>\n                    <GrStatusGoodSmall color='red' />\n                    <span className='text-lg'>{time}</span>\n                </span>\n            </div>\n        </div>\n    )\n}"],"names":["Mcq","useState","JSON","parse","localStorage","getItem","darkMode","currentPage","setCurrentPage","answers","setAnswers","useEffect","root","window","document","documentElement","classList","add","remove","questions","question","options","pagesVisited","pageCount","Math","ceil","length","displayQuestions","slice","map","i","className","option","j","type","name","value","checked","onChange","e","target","newAnswers","Object","assign","htmlFor","Header","onSubmit","preventDefault","console","log","Paginate","previousLabel","nextLabel","onPageChange","selected","containerClassName","previousLinkClassName","nextLinkClassName","activeClassName","pageClassName","disabledClassName","activePage","setActivePage","onClick","Array","time","setTime","continent","city","success","url","axios","data","date","datetime","getTime","color"],"sourceRoot":""}